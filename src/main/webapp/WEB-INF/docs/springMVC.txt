
    1.发送请求                                     2.调用处理器映射器，找到处理器
User---------------->DispatcherServlet(中央控制器)-------------------------->HandlerMapping(处理器映射器)
    11. 响应用户                                            <------------------------
    <-----------                                              返回HandlerExecutionChain
    10.渲染视图        9.返回view                                 HandlerInterceptor处理器拦截器
         |             ▲                            3.Handler处理器对象
         |             |     |                       |
         |             |     |                       |
         |             |     |                       |
         |             |     |                       |
         |             |     |                       |
         |             |     |                       |       Handler       5.调用处理器
         |             |     |                       |         |            ▲
         |             |     8.视图解析                       |         |            |
         |             |      |                       |         |             |
         |             |     |                       |         |             |
         |            |      |                       |         |           |
         |             |     |                       |         |           |
         |            |     |                       |         |           |
         |             |     |                       |         |           |
         |             |     |                       | 6.返回ModelAndView             |
         |             |     |                       ▼
         |                 ▼                       HandlerAdapter(处理器适配器)
        视图               视图解析器                        4.通过处理器适配器，调用具体的处理器
        view               ViewResolver

<web-app>
    <servlet>
        <servlet-name>example</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>example</servlet-name>
        <url-pattern>/example/*</url-pattern>
    </servlet-mapping>

</web-app>

DispatcherServlet，Spring MVC 在您的Web应用程序的目录中查找名为
 [servlet-name] -servlet.xml的WEB-INF文件，
并创建在那里定义的bean，覆盖全局范围中具有相同名称的所有bean的定义。
<web-app>
    <servlet>
        <servlet-name>golfing</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>golfing</servlet-name>
        <url-pattern>/golfing/*</url-pattern>
    </servlet-mapping>
</web-app>
With the above Servlet configuration in place,
you will need to have a file called /WEB-INF/golfing-servlet.xml
in your application;

HandlerMapping，HandlerAdapter，HandlerExceptionResolver
ViewResolver，LocaleResolver & LocaleContextResolver，
ThemeResolver，MultipartResolver，FlashMapManager

22.3.2 Mapping Requests With @RequestMapping
@RequestMapping("/spring-web/{symbolicName:[a-z-]+}-{version:\\d\\.\\d\\.\\d}{extension:\\.[a-z]+}")
public void handle(@PathVariable String version, @PathVariable String extension) {
    // ...
}

Path Patterns
GetMapping
@PostMapping
@PutMapping
@DeleteMapping
@PatchMapping

如果您打算读取和写入XML，则需要MarshallingHttpMessageConverter
使用包中的特定Marshaller和Unmarshaller 实现进行配置
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
    <property name="messageConverters">
        <util:list id="beanList">
            <ref bean="stringHttpMessageConverter"/>
            <ref bean="marshallingHttpMessageConverter"/>
        </util:list>
    </property
</bean>

<bean id="stringHttpMessageConverter"
        class="org.springframework.http.converter.StringHttpMessageConverter"/>

<bean id="marshallingHttpMessageConverter"
        class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
    <property name="marshaller" ref="castorMarshaller"/>
    <property name="unmarshaller" ref="castorMarshaller"/>
</bean>

<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"/>

@RestController is a stereotype annotation that combines
@ResponseBody and @Controller. More than that, it gives more meaning
to your Controller and also may carry additional semantics in future
releases of the framework.


A controller can have any number of @ModelAttribute methods.
All such methods are invoked before @RequestMapping methods
of the same controller.

@ModelAttribute
public Account addAccount(@RequestParam String number) {
    return accountManager.findAccount(number);
}

// Add multiple attributes

@ModelAttribute
public void populateModel(@RequestParam String number, Model model) {
    model.addAttribute(accountManager.findAccount(number));
    // add more ...
}

@PostMapping("/owners/{ownerId}/pets/{petId}/edit")
public String processSubmit(@ModelAttribute Pet pet) { }

@PutMapping("/accounts/{account}")
public String save(@ModelAttribute("account") Account account) {
    // ...
}

@RequestMapping("/")
public String handle(@SessionAttribute User user) {
    // ...
}

Mapping cookie values with the @CookieValue annotation
@RequestMapping("/displayHeaderInfo.do")
public void displayHeaderInfo(@CookieValue("JSESSIONID") String cookie) {
    //...
}

22.4处理程序映射 Handler mappings
<bean>
    <bean  class = “org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping” >
        <property  name = “interceptors” >
            <bean  class = “example.MyInterceptor” />
        </ property>
    </ bean>
<beans>

22.5.2 Chaining ViewResolvers
Spring supports multiple view resolvers. Thus you can chain resolvers and,
for example, override specific views in certain circumstances.
You chain view resolvers by adding more than one resolver to your application
context and, if necessary, by setting the order property to specify ordering.
Remember, the higher the order property, the later the view resolver is
positioned in the chain.

<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/jsp/"/>
    <property name="suffix" value=".jsp"/>
</bean>

<bean id="excelViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
    <property name="order" value="1"/>
    <property name="location" value="/WEB-INF/views.xml"/>
</bean>

<!-- in views.xml -->

<beans>
    <bean name="report" class="org.springframework.example.ReportExcelView"/>
</beans>

The redirect: prefix
The forward: prefix

<bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

    <!-- one of the properties available; the maximum file size in bytes -->
    <property name="maxUploadSize" value="100000"/>

</bean>

22.10.4 Handling a file upload in a form
<html>
    <head>
        <title>Upload a file please</title>
    </head>
    <body>
        <h1>Please upload a file</h1>
        <form method="post" action="/form" enctype="multipart/form-data">
            <input type="text" name="name"/>
            <input type="file" name="file"/>
            <input type="submit"/>
        </form>
    </body>
</html>

@Controller
public class FileUploadController {

    @PostMapping("/form")
    public String handleFormUpload(@RequestParam("name") String name,
            @RequestParam("file") MultipartFile file) {

        if (!file.isEmpty()) {
            byte[] bytes = file.getBytes();
            // store the bytes somewhere
            return "redirect:uploadSuccess";
        }

        return "redirect:uploadFailure";
    }

}

@PostMapping("/someUrl")
public String onSubmit(@RequestPart("meta-data") MetaData metadata,
        @RequestPart("file-data") MultipartFile file) {

    // ...

}

22.11 Handling exceptions
22.11.1 HandlerExceptionResolver

@Controller
public class SimpleController {

    // @RequestMapping methods omitted ...

    @ExceptionHandler(IOException.class)
    public ResponseEntity<String> handleIOException(IOException ex) {
        // prepare responseEntity
        return responseEntity;
    }

}

22.14.2 HTTP caching support for static resources
<mvc:resources mapping="/resources/**" location="/public-resources/">
    <mvc:cache-control max-age="3600" cache-public="true"/>
</mvc:resources>

@Configuration
@EnableWebMvc
public class WebConfig extends WebMvcConfigurerAdapter {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/resources/**")
                .addResourceLocations("/public-resources/")
                .setCacheControl(CacheControl.maxAge(1, TimeUnit.HOURS).cachePublic());
    }

}

22.16.5 Interceptors

@Configuration
@EnableWebMvc
public class WebConfig extends WebMvcConfigurerAdapter {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LocaleInterceptor());
        registry.addInterceptor(new ThemeInterceptor()).addPathPatterns("/**").excludePathPatterns("/admin/**");
        registry.addInterceptor(new SecurityInterceptor()).addPathPatterns("/secure/*");
    }

}

<mvc:interceptors>
    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    <mvc:interceptor>
        <mvc:mapping path="/**"/>
        <mvc:exclude-mapping path="/admin/**"/>
        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
    </mvc:interceptor>
    <mvc:interceptor>
        <mvc:mapping path="/secure/*"/>
        <bean class="org.example.SecurityInterceptor"/>
    </mvc:interceptor>
</mvc:interceptors>

<mvc:view-controller path="/" view-name="home"/>
<mvc:resources mapping="/resources/**" location="/public-resources/"/>




































